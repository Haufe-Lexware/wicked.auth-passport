#!/usr/bin/env node

'use strict';

const app = require('../app');
const async = require('async');
const debug = require('debug')('auth-passport:server');
const http = require('http');
const passport = require('passport');
const wicked = require('wicked-sdk');

const google = require('../providers/google');
const github = require('../providers/github');
const twitter = require('../providers/twitter');
const facebook = require('../providers/facebook');

let authServerId = 'auth-passport';
if (process.env.AUTH_SERVER_NAME) {
    authServerId = process.env.AUTH_SERVER_NAME;
}

console.log('Auth Server ID used: ' + authServerId + ', override with AUTH_SERVER_NAME.');

var port = normalizePort(process.env.PORT || '3010');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = null;

async.series({
    init: callback => wicked.initialize(callback),
    waitForKong: callback => wicked.awaitKongAdapter(callback),
    initMachineUser: callback => wicked.initMachineUser(authServerId, callback),
    authServerConfig: callback => wicked.apiGet('auth-servers/' + authServerId, callback),
    initApp: callback => app.initApp(callback)
}, function (err, results) {
    console.error(err);
    if (err)
        throw err;

    // Store the auth-server settings.
    app.authConfig = results.authServerConfig;
    console.log(app.authConfig);

    google.init(app.authConfig, authServerId);
    github.init(app.authConfig, authServerId);
    twitter.init(app.authConfig, authServerId);
    facebook.init(app.authConfig, authServerId);

    // Simplest kind of serialization and deserialization
    passport.serializeUser(function (user, done) {
        done(null, user);
    });

    passport.deserializeUser(function (user, done) {
        done(null, user);
    });

    console.log('Kong Adapter: ' + wicked.getInternalKongAdapterUrl());

    // Now create the server
    server = http.createServer(app);

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTP server "listening" event.
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('===================================');
    console.log(' Google Auth Server up and running');
    console.log('===================================');
    debug('Listening on ' + bind);
}
